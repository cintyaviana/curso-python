# ==========================================================
# IMPORTA√á√ÉO DOS RECURSOS
# ==========================================================

from pathlib import Path
import pandas as pd

# Carrega o DataFrame de impostos, calcula a coluna 'impostos_total' e consolida os dados por nota fiscal e SKU.


def get_fato_impostos():

    # Retorna o caminho de onde est√£o os arquivos do projeto
    dataPath = Path(__file__).resolve().parent

    # Carregar os dados
    dfImpostos = pd.read_excel(dataPath / 'fImpostos.xlsx')

    # Cria a coluna de impostos total somando os componentes
    dfImpostos['impostos_total'] = (
        dfImpostos['valor_icms'] +
        dfImpostos['valor_icms_st'] +
        dfImpostos['valor_fcp_st'] +
        dfImpostos['icms_interestadual_uf_destino'] +
        dfImpostos['valor_icms_fcp_uf_destino'] +
        dfImpostos['valor_pis'] +
        dfImpostos['valor_cofins']
    )

    # Converte para o Per√≠odo Mensal (01/m√™s/ano)
    dfImpostos['data'] = dfImpostos['data'].dt.to_period('M').dt.to_timestamp()

    # Criar uma coluna com o n√∫mero do m√™s
    dfImpostos['mes'] = dfImpostos['data'].dt.month

    # Agrupa pela Nota Fiscal para consolidar os impostos
    dfImpostos_consolidado = (
        dfImpostos
        # Estado tamb√©m √© chave de imposto
        .groupby(['nota_fiscal', 'cod_sku', 'estado'])
        .agg(
            impostos_total=('impostos_total', 'sum'),
            # <--- Inclu√≠do para o gr√°fico de composi√ß√£o
            valor_icms=('valor_icms', 'sum'),
            # <--- Inclu√≠do para o gr√°fico de composi√ß√£o
            valor_pis=('valor_pis', 'sum'),
            # <--- Inclu√≠do para o gr√°fico de composi√ß√£o
            valor_cofins=('valor_cofins', 'sum'),
            # Se a base tiver al√≠quotas, voc√™ pode traz√™-las aqui com 'first' ou 'mean'
            # aliq_icms=('aliq_icms', 'first'),
        )
        .reset_index()
    )

    # Retorna o DataFrame
    return dfImpostos

# ====================================================================================
# BLOCO DE AN√ÅLISE (Executado apenas se o arquivo for rodado diretamente)
# ====================================================================================


if __name__ == '__main__':
    # Carrega o DataFrame atrav√©s da fun√ß√£o
    dfImpostos = get_fato_impostos()

    # Exibir um determinado intervalo dos dados a partir do m√©todo head: primeiras linhas e o m√©todo tail: √∫ltimas linhas.
    print('='*120)
    print('üîó Primeiras 5 linhas do dfImpostos')
    print('='*120 + "\n")
    print(dfImpostos.head(5))
    print("\n")

    print('='*120)
    print('üîó √öltimas 5 linhas do dfImpostos')
    print('='*120 + "\n")
    print(dfImpostos.tail(5))
    print("\n")

    # Exibir os nomes das colunas e o tipo dos dados
    print('='*120)
    print('üîó Nome das colunas do dfImpostos')
    print('='*120 + "\n")
    print('Colunas: ', dfImpostos.dtypes)
    print("\n")

    # Exibir o resumo estat√≠stico
    print('='*120)
    print('üîó Resumo estat√≠stico do dfImpostos')
    print('='*120 + "\n")
    print(dfImpostos.describe())
    print("\n")

    # ==============================================================================
    # AN√ÅLISE DE CORRELA√á√ÉO: Componentes (impostos) vs. Imposto Total
    # ==============================================================================
    print('='*120)
    print('üîó Correla√ß√£o dos Componentes (impostos) com o Imposto Total')
    print('='*120 + "\n")

    componentes_imposto = [
        'valor_icms',
        'valor_icms_st',
        'valor_fcp_st',
        'icms_interestadual_uf_destino',
        'valor_icms_fcp_uf_destino',
        'valor_pis',
        'valor_cofins'
    ]

    # Selecionar as colunas para o c√°lculo da correla√ß√£o
    impostos_corr = componentes_imposto + ['impostos_total']

    # Garantir que s√≥ estamos correlacionando colunas num√©ricas v√°lidas
    df_impostos_corr = dfImpostos[impostos_corr].dropna()

    # Calcular a correla√ß√£o da matriz completa
    matriz_impostos_corr = df_impostos_corr.corr()

    # Selecionar apenas a correla√ß√£o dos componentes com 'impostos_total'
    impostos_corr_total = matriz_impostos_corr['impostos_total'].drop(
        'impostos_total')

    # Ordenar para ver qual √© o mais correlacionado
    impostos_corr_ordenada = impostos_corr_total.sort_values(
        ascending=False).round(4)

    # Exibi√ß√£o dos dados
    print('Correla√ß√£o de cada componente (impostos) com o "impostos_total":')
    print(impostos_corr_ordenada)
    print("\n")

    # ==============================================================================
    # AN√ÅLISE DE ASSOCIA√á√ÉO: Al√≠quotas por Estado
    # ==============================================================================

    print('='*120)
    print('üîó An√°lise de Al√≠quotas e Valores M√©dios por Estado')
    print('='*120 + "\n")

    # Definindo os nomes das colunas de interesse
    COLUNAS_ALIQUOTAS = [
        'aliq_icms',
        'aliq_pis',
        'aliq_cofins'
    ]

    # Agrupar os dados pela coluna 'estado' e calcula as m√©dias
    analise_por_estado = dfImpostos.groupby('estado').agg(
        # M√©dias das Al√≠quotas Individuais
        media_aliq_icms=('aliq_icms', 'mean'),
        media_aliq_pis=('aliq_pis', 'mean'),
        media_aliq_cofins=('aliq_cofins', 'mean'),
        media_valor_unitario=('valor_unitario', 'mean'),
        media_valor_bruto=('valor_bruto', 'mean'),
        media_imposto_total=('impostos_total', 'mean')
    )

    # Calcular a m√©dia das 3 al√≠quotas (icms, pis, cofins) por estado
    analise_por_estado['media_aliquotas'] = analise_por_estado[[
        'media_aliq_icms',
        'media_aliq_pis',
        'media_aliq_cofins'
    ]].mean(axis=1)

    # Ordenar a an√°lise pela m√©dia das al√≠quotas
    analise_ordenada = analise_por_estado.sort_values(
        by='media_aliquotas', ascending=False).round(1)

    # Exibi√ß√£o dos dados
    print('M√©dias (Individuais e Agregada) e Valores por Estado (ordenado pela M√©dia das Al√≠quotas):')
    print(analise_ordenada)
    print('-'*100)
